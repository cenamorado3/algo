#!/bin/python3

import math
import os
import random
import re
import sys
from bisect import bisect_left 

# Complete the insertionSort function below.
def insertionSort(arr):
    BIT = BinaryIndexTree(arr)
    return (BIT.GetInversionCount(arr))
class BinaryIndexTree:
    def __init__(self, arr):
        '''
        self.arr = [0] + arr
        for i in range(1, len(self.arr)):
            j = i + (i & -i)
            if j < len(self.arr):
                self.arr[j] += self.arr[i]
                '''

    def GetSum(self, arr, index):
        result = 0
        print(index)
        while index > 0:
            result += arr[index]
            index -= index & -index
        return result


    def Update(self, arr, n, index, value):
        while (index <= n):
            arr[index] += value
            index += index & -index

    def Convert(self, arr):
        temp = [0]*(len(arr))
        for i in range(len(arr)):
            temp[i] = arr[i]
        temp = sorted(temp)
        
        for i in range(len(arr)):
            arr[i] = bisect_left (temp, arr[i]) + 1


    def GetInversionCount(self, arr):
        invCount = 0
        self.Convert(arr)
        BIT = [0] * (len(arr) + 1)
        for i in range(len(arr) -1, -1, -1):
            invCount += self.GetSum(BIT, arr[i] - 1)
            self.Update(BIT, len(arr), arr[i], 1)
        return invCount







if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    t = int(input())

    for t_itr in range(t):
        n = int(input())

        arr = list(map(int, input().rstrip().split()))

        result = insertionSort(arr)

        fptr.write(str(result) + '\n')

    fptr.close()
